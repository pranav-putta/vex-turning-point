16
{"last_modification_time":1535575761,"language":2,"import_file":"c:/users/pputta0/documents/vex/src/math/matrix.cpp","args_hash":17504948499890120394,"includes":[],"dependencies":["c:/users/pputta0/documents/vex/src/math/matrix.cpp"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":12239608736783632329,"detailed_name":"matrix_t","short_name_offset":0,"short_name_size":8,"kind":23,"hover":"","comments":"","declarations":[],"spell":"8:16-8:24|-1|1|2","extent":"8:9-13:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[0,1,2],"instances":[],"uses":[]},{"id":1,"usr":4811014003801498068,"detailed_name":"matrix","short_name_offset":0,"short_name_size":6,"kind":252,"hover":"","comments":"","declarations":[],"spell":"13:3-13:9|-1|1|2","extent":"8:1-13:9|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["13:3-13:9|-1|1|4","23:24-23:30|-1|1|4","29:18-29:24|-1|1|4","36:17-36:23|-1|1|4","45:17-45:23|-1|1|4","53:24-53:30|-1|1|4","60:24-60:30|-1|1|4","60:38-60:44|-1|1|4","68:29-68:35|-1|1|4","68:62-68:68|-1|1|4","76:34-76:40|-1|1|4","76:67-76:73|-1|1|4","84:36-84:42|-1|1|4","84:69-84:75|-1|1|4","92:34-92:40|-1|1|4","92:67-92:73|-1|1|4","100:33-100:39|-1|1|4","100:66-100:72|-1|1|4","108:29-108:35|-1|1|4","108:49-108:55|-1|1|4","108:63-108:69|-1|1|4","116:34-116:40|-1|1|4","116:54-116:60|-1|1|4","116:68-116:74|-1|1|4","124:36-124:42|-1|1|4","124:56-124:62|-1|1|4","124:70-124:76|-1|1|4","131:29-131:35|-1|1|4","131:42-131:48|-1|1|4","139:26-139:32|-1|1|4","139:39-139:45|-1|1|4","147:28-147:34|-1|1|4","147:41-147:47|-1|1|4","154:26-154:32|-1|1|4","161:32-161:38|-1|1|4","169:26-169:32|-1|1|4","169:39-169:45|-1|1|4","176:19-176:25|-1|1|4"]},{"id":2,"usr":9,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,1],"uses":[]},{"id":3,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[2],"uses":[]}],"funcs":[{"id":0,"usr":6584680585373995338,"detailed_name":"bool matrix_Initialize(matrix *mat, const unsigned int columns, const unsigned int rows, float defaultValue)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\nInitializes a matrix\n@param  mat          matrix to initialze\n@param  columns      Columns\n@param  rows         Rows\n@param  defaultValue Value to initialze the elements to\n@return              Whether the matrix was initialized successfully","declarations":[{"spell":"23:6-23:23|-1|1|1","param_spellings":["23:32-23:35","23:56-23:63","23:84-23:88","23:96-23:108"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":10718218782796581287,"detailed_name":"void matrix_Free(matrix *mat)","short_name_offset":5,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\nFrees a matrix\n@param mat matrix to free","declarations":[{"spell":"29:6-29:17|-1|1|1","param_spellings":["29:26-29:29"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":12981277562936852237,"detailed_name":"void matrix_Set(matrix *mat, const float *data)","short_name_offset":5,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\nSets the elements of a matrix from an arry\n@param mat  matrix to write to\n@param data Array of new data","declarations":[{"spell":"36:6-36:16|-1|1|1","param_spellings":["36:25-36:28","36:43-36:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":3735135382325068264,"detailed_name":"void matrix_Set(matrix *mat, const unsigned int x, const unsigned int y, const float data)","short_name_offset":5,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\nSets an element of a matrix\n@param mat  matrix to write to\n@param x    Number of columns in\n@param y    Number of rows in\n@param data New data","declarations":[{"spell":"45:6-45:16|-1|1|1","param_spellings":["45:25-45:28","45:49-45:50","45:71-45:72","45:86-45:90"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":8541431984096171125,"detailed_name":"float matrix_Get(const matrix *mat, const unsigned int x, const unsigned int y)","short_name_offset":6,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\nGets an element of a matrix\n@param mat  matrix to read from\n@param x    Number of columns in\n@param y    Number of rows in","declarations":[{"spell":"53:7-53:17|-1|1|1","param_spellings":["53:32-53:35","53:56-53:57","53:78-53:79"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":5040758692489020577,"detailed_name":"void matrix_Copy(const matrix *from, matrix *to)","short_name_offset":5,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\nCopies one matrix to another\n@param from matrix to copy from\n@param to   matrix to copy to","declarations":[{"spell":"60:6-60:17|-1|1|1","param_spellings":["60:32-60:36","60:46-60:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":6549892351695210156,"detailed_name":"void matrix_AddScalar(const matrix *mat, const float scalar, matrix *result)","short_name_offset":5,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\nAdds a scalar to every element of a matrix\n@param mat    matrix to read from\n@param scalar Scalar\n@param result matrix to write result to","declarations":[{"spell":"68:6-68:22|-1|1|1","param_spellings":["68:37-68:40","68:54-68:60","68:70-68:76"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":6782360290012010001,"detailed_name":"void matrix_SubtractScalar(const matrix *mat, const float scalar, matrix *result)","short_name_offset":5,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\nSubtracts a scalar to every element of a matrix\n@param mat    matrix to read from\n@param scalar Scalar\n@param result matrix to write result to","declarations":[{"spell":"76:6-76:27|-1|1|1","param_spellings":["76:42-76:45","76:59-76:65","76:75-76:81"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":8774966609743931364,"detailed_name":"void matrix_MultiplyByScalar(const matrix *mat, const float scalar, matrix *result)","short_name_offset":5,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"\nMultiplies a matrix by a scalar\n@param mat    matrix to read from\n@param scalar Scalar\n@param result matrix to write result to","declarations":[{"spell":"84:6-84:29|-1|1|1","param_spellings":["84:44-84:47","84:61-84:67","84:77-84:83"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":3377349513182276591,"detailed_name":"void matrix_DivideByScalar(const matrix *mat, const float scalar, matrix *result)","short_name_offset":5,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\nDivides a matrix by a scalar\n@param mat    matrix to read from\n@param scalar Scalar\n@param result matrix to write result to","declarations":[{"spell":"92:6-92:27|-1|1|1","param_spellings":["92:42-92:45","92:59-92:65","92:75-92:81"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":4540140374766551529,"detailed_name":"void matrix_RaiseToScalar(const matrix *mat, const float scalar, matrix *result)","short_name_offset":5,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\nRaises a matrix to a power\n@param mat    matrix to read from\n@param scalar Scalar\n@param result matrix to write result to","declarations":[{"spell":"100:6-100:26|-1|1|1","param_spellings":["100:41-100:44","100:58-100:64","100:74-100:80"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":6117195101458448184,"detailed_name":"void matrix_AddMatrix(const matrix *mat1, const matrix *mat2, matrix *result)","short_name_offset":5,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\nAdds two matricies together\n@param mat1   First matrix\n@param mat2   Second matrix\n@param result matrix to write result to","declarations":[{"spell":"108:6-108:22|-1|1|1","param_spellings":["108:37-108:41","108:57-108:61","108:71-108:77"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":16321168244152630220,"detailed_name":"void matrix_SubtractMatrix(const matrix *mat1, const matrix *mat2, matrix *result)","short_name_offset":5,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\nSubtracts two matricies from each other\n@param mat1   First matrix\n@param mat2   Second matrix\n@param result matrix to write result to","declarations":[{"spell":"116:6-116:27|-1|1|1","param_spellings":["116:42-116:46","116:62-116:66","116:76-116:82"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":2831269123255099057,"detailed_name":"void matrix_MultiplyByMatrix(const matrix *mat1, const matrix *mat2, matrix *result)","short_name_offset":5,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"\nMultiplies two matricies together\n@param mat1   First matrix\n@param mat2   Second matrix\n@param result matrix to write result to","declarations":[{"spell":"124:6-124:29|-1|1|1","param_spellings":["124:44-124:48","124:64-124:68","124:78-124:84"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":18211400833681525949,"detailed_name":"void matrix_Transpose(const matrix *mat, matrix *result)","short_name_offset":5,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\nTransposes a matrix\n@param mat    matrix to read from\n@param result matrix to write to","declarations":[{"spell":"131:6-131:22|-1|1|1","param_spellings":["131:37-131:40","131:50-131:56"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":10884289434204024751,"detailed_name":"bool matrix_Minors(const matrix *mat, matrix *result)","short_name_offset":5,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\nCalculates the matrix of minors\n@param  mat    matrix to read from\n@param  result matrix to write to\n@return        Whether the operation was successful","declarations":[{"spell":"139:6-139:19|-1|1|1","param_spellings":["139:34-139:37","139:47-139:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":16,"usr":1140693619234389760,"detailed_name":"bool matrix_Cofactor(const matrix *mat, matrix *result)","short_name_offset":5,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\nCalculates the cofactor matrix\n@param  mat    matrix to read from\n@param  result matrix to write to\n@return        Whether the operation was successful","declarations":[{"spell":"147:6-147:21|-1|1|1","param_spellings":["147:36-147:39","147:49-147:55"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":18156167309171362259,"detailed_name":"float matrix_Trace(const matrix *mat)","short_name_offset":6,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\nReturns the trace of a square matrix\n@param  mat Square matrix to read from\n@return     The trace of the matrix","declarations":[{"spell":"154:7-154:19|-1|1|1","param_spellings":["154:34-154:37"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":18,"usr":17644642760441019425,"detailed_name":"float matrix_Determinant(const matrix *mat)","short_name_offset":6,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\nReturns the determinant of a square matrix\n@param  mat Square matrix to read from\n@return     The determinant of that matrix","declarations":[{"spell":"161:7-161:25|-1|1|1","param_spellings":["161:40-161:43"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":4039113890336074473,"detailed_name":"bool matrix_Invert(const matrix *mat, matrix *result)","short_name_offset":5,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\nInverts a matrix\n@param mat    matrix to read from\n@param result matrix to write to\n@return       Whether the matrix is invertible","declarations":[{"spell":"169:6-169:19|-1|1|1","param_spellings":["169:34-169:37","169:47-169:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":5261766801375805934,"detailed_name":"void matrix_Clear(matrix *mat, float clearVal)","short_name_offset":5,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\nClears a matrix\n@param mat      matrix to clear\n@param clearVal Value to clear the elements to","declarations":[{"spell":"176:6-176:18|-1|1|1","param_spellings":["176:27-176:30","176:38-176:46"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":8544417979953590339,"detailed_name":"unsigned int matrix_t::columns","short_name_offset":23,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"10:16-10:23|0|2|2","extent":"10:3-10:23|0|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":1,"usr":9173070587751034948,"detailed_name":"unsigned int matrix_t::rows","short_name_offset":23,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"11:16-11:20|0|2|2","extent":"11:3-11:20|0|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":2,"usr":3857608017348859459,"detailed_name":"int matrix_t::data","short_name_offset":14,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"12:9-12:13|0|2|2","extent":"12:3-12:13|0|2|0","type":3,"uses":[],"kind":8,"storage":0},{"id":3,"usr":1273863311301397224,"detailed_name":"BCI_MATRIX_H_INCLUDED","short_name_offset":0,"short_name_size":21,"hover":"#define BCI_MATRIX_H_INCLUDED","comments":"","declarations":[],"spell":"2:9-2:30|-1|1|2","extent":"2:9-2:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":4,"usr":12064409805821642507,"detailed_name":"BCI_MATRIX_O0","short_name_offset":0,"short_name_size":13,"hover":"#define BCI_MATRIX_O0","comments":"","declarations":[],"spell":"5:11-5:24|-1|1|2","extent":"5:11-5:24|-1|1|0","uses":[],"kind":255,"storage":0}]}